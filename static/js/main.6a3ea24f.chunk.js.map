{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","common/DeleteDeckButton.js","home/DeckListItem.js","common/LoadingCircle.js","home/DeckList.js","home/Home.js","common/Breadcrumb.js","common/DynamicForm.js","decks/deck/new/NewDeck.js","decks/deck/study/StudyCard.js","decks/deck/study/Study.js","decks/deck/CardListItem.js","decks/deck/CardList.js","decks/deck/edit/Edit.js","decks/deck/cards/AddCard.js","decks/deck/cards/EditCard.js","decks/deck/Deck.js","decks/Decks.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","deckId","updatedDeck","id","card","Number","cardId","updatedCard","append","DeleteDeckButton","onComplete","onClick","window","confirm","deleteDeck","then","catch","DeckListItem","description","setDecks","style","display","length","to","current","filter","LoadingCircle","container","internal","role","DeckList","useState","decks","deckList","map","idx","useEffect","controller","AbortController","listDecks","abort","Home","history","useHistory","Fragment","type","push","Breadcrumb","includeHome","navigation","navList","index","DynamicForm","inputs","submit","submitName","submitAction","action","cancel","cancelName","cancelUrl","initialForm","forEach","input","defaultValue","formData","setFormData","inputList","updateFormData","e","persist","currentFormData","target","value","htmlFor","formattedName","inputType","placeholder","onChange","rows","required","onSubmit","preventDefault","NewDeck","submitting","setSubmitting","content","createDeck","StudyCardSide","flipped","front","text","cardNumber","total","updateState","showNextButton","StudyCard","back","state","hasBeenFlipped","Study","setState","key","CardListItem","setCards","useRouteMatch","deleteCard","check","CardList","cardList","Edit","updateDeck","AddCard","createCard","EditCard","useParams","find","tmpCard","setCard","readCard","updateCard","tmp","log","DeckView","Deck","setDeck","readDeck","exact","path","func","currentDeck","Decks","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAaeA,MAXf,WACE,OACE,wBAAQC,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,OAAb,sDCGOC,MARf,WACE,OACE,qBAAKD,UAAU,WAAf,SACE,8C,0DCDAE,EAAe,yDAKfC,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OADA,YAAuCD,EAAvC,G,SAoBaE,E,kFAAf,WAAyBC,EAAKC,EAASC,GAAvC,eAAAC,EAAA,+EAE2BC,MAAMJ,EAAKC,GAFtC,aAEUI,EAFV,QAIiBC,OAAS,KAAOD,EAASC,OAAS,KAJnD,sBAKY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aALvD,UAQ4B,MAApBH,EAASC,OARjB,yCASa,MATb,wBAYiBD,EAASI,OAZ1B,8EAcuB,eAAf,KAAMC,KAdd,uBAeMC,QAAQC,MAAM,KAAMC,OAf1B,sCAkBWC,QAAQC,QAAQb,IAlB3B,2D,kEA2BO,WAAyBc,GAAzB,eAAAb,EAAA,6DACCH,EADD,UACUP,EADV,gCAEQM,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,kEAeA,WAA0BnB,EAAMmB,GAAhC,iBAAAb,EAAA,6DACCH,EADD,UACUP,EADV,UAECQ,EAAU,CACdgB,OAAQ,OACRvB,UACAwB,KAAMC,KAAKC,UAAUxB,EAAWC,IAChCmB,UANG,SAQQjB,EAAUC,EAAKC,EAAS,IARhC,oF,kEAoBA,WAAwBoB,EAAQL,GAAhC,eAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgC4B,EADhC,0BAEQtB,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,kEAcA,WAA0BM,EAAaN,GAAvC,iBAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgC6B,EAAYC,GAD5C,iBAECtB,EAAU,CACdgB,OAAQ,MACRvB,UACAwB,KAAMC,KAAKC,UAAUxB,EAAW0B,IAChCN,UANG,SAQQjB,EAAUC,EAAKC,EAASqB,GARhC,oF,kEAoBA,WAA0BD,EAAQL,GAAlC,iBAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgC4B,GAC/BpB,EAAU,CAAEgB,OAAQ,SAAUD,UAF/B,SAGQjB,EAAUC,EAAKC,GAHvB,oF,kEAgCA,WAA0BoB,EAAQG,EAAMR,GAAxC,iBAAAb,EAAA,6DAGCH,EAHD,UAGUP,EAHV,UAIL+B,EAAKH,OAASI,OAAOJ,GACfpB,EAAU,CACdgB,OAAQ,OACRvB,UACAwB,KAAMC,KAAKC,UAAUI,GACrBR,UATG,SAWQjB,EAAUC,EAAKC,EAASuB,GAXhC,oF,kEAuBA,WAAwBE,EAAQV,GAAhC,eAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgCiC,GADhC,SAEQ3B,EAAUC,EAAK,CAAEgB,UAAU,IAFnC,oF,kEAcA,WAA0BW,EAAaX,GAAvC,iBAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgCkC,EAAYJ,IAC3CtB,EAAU,CACdgB,OAAQ,MACRvB,UACAwB,KAAMC,KAAKC,UAAUO,IALlB,SAOQ5B,EAAUC,EAAKC,EAAS0B,GAPhC,oF,kEAmBA,WAA0BD,EAAQV,GAAlC,iBAAAb,EAAA,6DACCH,EADD,UACUP,EADV,kBACgCiC,GAC/BzB,EAAU,CAAEgB,OAAQ,SAAUD,UAF/B,SAGQjB,EAAUC,EAAKC,GAHvB,oF,sBAzNPP,EAAQkC,OAAO,eAAgB,oBCgBhBC,MAvBf,YAA+C,IAAnBN,EAAkB,EAAlBA,GAAIO,EAAc,EAAdA,WAC9B,OACE,wBACEvC,UAAU,yCACVwC,QAAS,WAELC,OAAOC,QACL,6DDiIL,SAAP,oCC9HUC,CAAWX,EAAI,MACZY,KAAKL,GACLM,OAAM,SAACxB,QAVhB,SAgBE,sBAAMrB,UAAU,mBCkBP8C,MAnCf,YAA6E,IAAD,IAApDxC,KAAQ0B,EAA4C,EAA5CA,GAAIb,EAAwC,EAAxCA,KAAM4B,EAAkC,EAAlCA,YAAaxC,EAAqB,EAArBA,MAASyC,EAAY,EAAZA,SAC9D,OACE,qBAAKhD,UAAW,cAAhB,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIiD,MAAO,CAAEC,QAAS,gBAAtB,SAAyC/B,IACzC,wBAAOnB,UAAU,yBAAjB,UACGO,EAAM4C,OADT,eAIF,mBAAGnD,UAAU,YAAb,SAA0B+C,IAC1B,eAAC,IAAD,CAAM/C,UAAU,yBAAyBoD,GAAE,iBAAYpB,GAAvD,UACE,sBAAMhC,UAAU,cADlB,WAGA,eAAC,IAAD,CAAMA,UAAU,uBAAuBoD,GAAE,iBAAYpB,EAAZ,UAAzC,UACE,sBAAMhC,UAAU,eADlB,YAGA,eAAC,IAAD,CAAMA,UAAU,eAAeoD,GAAE,iBAAYpB,EAAZ,SAAjC,UACE,sBAAMhC,UAAU,eADlB,WAGA,cAAC,EAAD,CACEgC,GAAIA,EACJO,WAAY,kBACVS,GAAS,SAACK,GACR,OAAOA,EAAQC,QAAO,SAAChD,GAAD,OAAUA,EAAK0B,KAAOA,mBCT7CuB,MAlBf,YAAuC,IAAdC,EAAa,EAAbA,UACjBC,EACJ,qBAAKzD,UAAU,gCAAf,SACE,qBAAKA,UAAU,iBAAiB0D,KAAK,SAArC,SACE,sBAAM1D,UAAU,UAAhB,4BAKN,OAAOwD,EACL,qBAAKxD,UAAW,MAAhB,SACE,qBAAKA,UAAW,SAAhB,SAA2ByD,MAG7BA,GCyBWE,MApCf,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcb,EAAd,KAEMc,EAAWD,EACbA,EAAME,KAAI,SAACzD,EAAM0D,GAAP,OACR,cAAC,EAAD,CAAwB1D,KAAMA,EAAM0C,SAAUA,GAA3BgB,MAErB,GAcJ,OAZAC,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAQvB,OJ+CG,SAAP,kCIrDIC,CAAUF,EAAWzC,QAClBmB,KAAKI,GACLH,OAAM,eAIF,kBAAMqB,EAAWG,WACvB,IAECR,GAASA,EAAMV,OAAeW,EAG9B,qBAAK9D,UAAW,SAAhB,SACG6D,EACC,oBAAI7D,UAAU,cAAd,sDAIA,cAAC,EAAD,CAAewD,WAAW,OCVrBc,MArBf,WACE,IAAMC,EAAUC,cAEhB,OACE,cAAC,IAAMC,SAAP,UACE,sBAAKzE,UAAW,MAAhB,UACE,qBAAKA,UAAW,SAAhB,SACE,yBACE0E,KAAK,SACL1E,UAAU,oBACVwC,QAAS,kBAAM+B,EAAQI,KAAK,eAH9B,UAKE,sBAAM3E,UAAU,eALlB,oBAQF,cAAC,EAAD,U,QCuBO4E,MAvCf,YAAkD,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,WAC7BC,EAAUF,EAAW,CAEnB,CACE1D,KACE,eAAC,IAAMsD,SAAP,WACE,sBAAMzE,UAAU,eADlB,UAKFS,IAAK,MATY,mBAWhBqE,IAELA,EAkBJ,OAhBAC,EAAUA,EAAQhB,KAAI,WAAgBiB,GAAW,IAAxB7D,EAAuB,EAAvBA,KAAMV,EAAiB,EAAjBA,IAC7B,OAAIuE,IAAUD,EAAQ5B,OAAS,EAE3B,oBAAgBnD,UAAU,yBAAyB,eAAa,OAAhE,SACGmB,GADM6D,GAMT,cAAC,IAAD,CAAkB5B,GAAI3C,EAAKT,UAAU,kBAArC,SACGmB,GADQ6D,MAQf,qBAAK,aAAW,aAAhB,SACE,oBAAIhF,UAAU,aAAd,SAA4B+E,O,eCsCnBE,MAxEf,YAII,IAHFC,EAGC,EAHDA,OAGC,IAFDC,OAEC,gBAF+D,GAE/D,GAFShE,KAAMiE,OAEf,MAF4B,SAE5B,EAF8CC,EAE9C,EAFsCC,OAEtC,IADDC,OACC,gBADyD,GACzD,GADSpE,KAAMqE,OACf,MAD4B,SAC5B,EAD2CC,EAC3C,EADsChF,IAEjCiF,EAAc,GAEpBR,EAAOS,SAAQ,SAACC,GAAD,OAAYF,EAAYE,EAAMzE,MAAQyE,EAAMC,gBAE3D,MAAgCjC,mBAAS,eAAK8B,IAA9C,mBAAOI,EAAP,KAAiBC,EAAjB,KAEMC,EAAYd,EAAOnB,KAAI,SAAC6B,EAAO5B,GACnC,IAAMiC,EAAiB,SAACC,GACtBA,EAAEC,UACFJ,GAAY,SAACK,GAAD,mBAAC,eACRA,GADO,kBAETF,EAAEG,OAAOlF,KAAO+E,EAAEG,OAAOC,YAI9B,OACE,sBAAetG,UAAU,aAAzB,UACE,uBAAOuG,QAASX,EAAM5D,GAAtB,SAA2B4D,EAAMY,gBACZ,aAApBZ,EAAMa,UACL,0BACEzG,UAAU,eACVgC,GAAI4D,EAAM5D,GACVb,KAAMyE,EAAMzE,KACZuF,YAAad,EAAMc,YACnBJ,MAAOR,EAASF,EAAMzE,MACtBwF,SAAUV,EACVW,KAAM,EACNC,UAAU,IAGZ,uBACE7G,UAAU,eACVgC,GAAI4D,EAAM5D,GACVb,KAAMyE,EAAMzE,KACZuF,YAAad,EAAMc,YACnBJ,MAAOR,EAASF,EAAMzE,MACtBwF,SAAUV,EACVY,UAAU,MArBN7C,MA4Bd,OACE,qBAAKhE,UAAU,MAAf,SACE,qBAAKA,UAAW,SAAhB,SACE,uBACE8G,SAAU,SAACZ,GACTA,EAAEa,iBACF1B,EAAaS,GACbC,EAAY,eAAKL,KAJrB,UAOGM,EACD,cAAC,IAAD,CAAMhG,UAAU,yBAAyBoD,GAAIqC,EAA7C,SACGD,IAEH,wBAAQd,KAAK,SAAS1E,UAAU,kBAAhC,SACGoF,YCOE4B,MAnEf,WACE,IAAMzC,EAAUC,cAEhB,EAAoCZ,oBAAS,GAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KAeMC,EAAWF,EAwBf,cAAC,EAAD,CAAezD,WAAW,IAvB1B,cAAC,EAAD,CACE0B,OAAQ,CACN,CACEuB,UAAW,OACXzE,GAAI,OACJb,KAAM,OACNqF,cAAe,OACfE,YAAa,YACbb,aAAc,IAEhB,CACEY,UAAW,WACXzE,GAAI,cACJb,KAAM,cACNqF,cAAe,cACfE,YAAa,gCACbb,aAAc,KAGlBV,OAAQ,CAAEG,OAjCK,SAACQ,GAClBoB,GAAc,GRwEX,SAAP,oCQtEIE,CAAWtB,EAAU,MAClBlD,MAAK,SAACtC,GAAD,OAAUiE,EAAQI,KAAR,iBAAuBrE,EAAK0B,QAC3CY,MAAK,WACJsE,GAAc,MAEfrE,OAAM,iBA0BP0C,OAAQ,CAAE9E,IAAK,OAMnB,OACE,eAAC,IAAMgE,SAAP,WACE,qBAAKzE,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE6E,aAAa,EACbC,WAAY,CAAC,CAAE3D,KAAM,sBAI3B,qBAAKnB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,iDAGJ,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SAAyBmH,UCjEjC,SAASE,EAAT,GAQI,IAPFC,EAOC,EAPDA,QACAC,EAMC,EANDA,MACAC,EAKC,EALDA,KACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,YACAC,EACC,EADDA,eAEMrD,EAAUC,cAEhB,OACE,qBAAKxE,UAAWuH,EAAQ,UAAY,6BAApC,SACE,sBAAKvH,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,UACGuH,IAAUD,EAAU,OAAS,OADhC,IACyCG,EAAa,EADtD,OAC6DC,KAE7D,mBAAG1H,UAAU,YAAb,SAA0BwH,IAC1B,wBACExH,UACEuH,EAAQ,uBAAyB,mCAEnC/E,QAAS,WACPmF,EAAY,UAAWJ,GACvBI,EAAY,kBAAkB,IANlC,SASGJ,IAAUD,EAAU,OAAS,SAE/BM,GACC,wBACE5H,UACE,iCAAmCuH,EAAQ,GAAK,cAElD/E,QAAS,WACHiF,EAAa,IAAMC,GACrBC,EAAY,WAAW,GACvBA,EAAY,aAAcF,EAAa,GACvCE,EAAY,kBAAkB,IAG5BlF,OAAOC,QACL,iEAGFiF,EAAY,WAAW,GACvBA,EAAY,aAAc,GAC1BA,EAAY,kBAAkB,IAE9BpD,EAAQI,KAAK,MAnBrB,SAwBG4C,IAAUD,EAAU,OAAS,cAqD3BO,MA7Cf,YAMI,IALF/F,EAKC,EALDA,OAKC,IAJDG,KAAQsF,GAIP,aAJuB,GAIvB,GAJOA,MAAOO,EAId,EAJcA,KACfJ,EAGC,EAHDA,MAGC,IAFDK,MAAST,EAER,EAFQA,QAASU,EAEjB,EAFiBA,eAAgBP,EAEjC,EAFiCA,WAClCE,EACC,EADDA,YAEA,OAAID,GAAS,EAET,eAAC,IAAMjD,SAAP,WACE,mDACA,+EACiDiD,EADjD,oBAGA,eAAC,IAAD,CAAM1H,UAAU,kBAAkBoD,GAAE,iBAAYtB,EAAZ,cAApC,UACE,sBAAM9B,UAAU,eADlB,mBAQJ,sBAAKA,UAAW,sBAAwBsH,EAAU,KAAO,IAAzD,UACE,cAACD,EAAD,CACEC,QAASA,EACTC,OAAO,EACPC,KAAMD,EACNE,WAAYA,EACZC,MAAOA,EACPE,eAAgBI,EAChBL,YAAaA,IAEf,cAACN,EAAD,CACEC,QAASA,EACTC,OAAO,EACPC,KAAMM,EACNL,WAAYA,EACZC,MAAOA,EACPE,eAAgBI,EAChBL,YAAaA,QCpDNM,MA/Cf,YAA0B,IAAT3H,EAAQ,EAARA,KAOf,EAA0BsD,mBAAS,eANd,CACnB6D,WAAY,EACZH,SAAS,EACTU,gBAAgB,KAGlB,mBAAOD,EAAP,KAAcG,EAAd,KAKA,OAAO5H,EACL,eAAC,IAAMmE,SAAP,WACE,qBAAKzE,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE6E,aAAa,EACbC,WAAY,CACV,CAAE3D,KAAMb,EAAKa,KAAMV,IAAK,UAAYH,EAAK0B,IACzC,CAAEb,KAAM,gBAKhB,qBAAKnB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,yCAAYM,EAAKa,YAGrB,qBAAKnB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE8B,OAAQxB,EAAK0B,GACbC,KAAM3B,EAAKC,MAAMwH,EAAMN,YACvBC,MAAOpH,EAAKC,MAAM4C,OAClB4E,MAAOA,EACPJ,YA5BU,SAACQ,EAAK7B,GAAN,OAClB4B,GAAS,SAAC7E,GAAD,mBAAC,eAAkBA,GAAnB,kBAA6B8E,EAAM7B,iBAiC5C,cAAC,EAAD,CAAe9C,WAAW,KCOf4E,MAnDf,YAA2C,IAAnBnG,EAAkB,EAAlBA,KAAMoG,EAAY,EAAZA,SACpB5H,EAAQ6H,cAAR7H,IAER,OACE,qBAAKT,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BiC,EAAKsF,UAEjC,qBAAKvH,UAAU,QAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BiC,EAAK6F,YAGnC,qBAAK9H,UAAU,WAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,eAAC,IAAD,CACEA,UAAU,yBACVoD,GAAE,UAAK3C,EAAL,kBAAkBwB,EAAKD,GAAvB,SAFJ,UAIE,sBAAMhC,UAAU,iBAJlB,WAMA,wBACEA,UAAU,yCACVwC,QAAS,WAELC,OAAOC,QACL,6DXoMb,SAAP,oCWjMkB6F,CAAWtG,EAAKD,GAAI,MACjBY,MAAK,kBACJyF,GAAS,SAAC9H,GAAD,OACPA,EAAM+C,QAAO,SAACkF,GAAD,OAAWA,EAAMxG,KAAOC,EAAKD,YAG7Ca,OAAM,SAACxB,QAdhB,SAoBE,sBAAMrB,UAAU,6BC5BfyI,MAff,YAAwC,IAApBJ,EAAmB,EAAnBA,SACZK,EAD+B,EAATnI,MACLwD,KAAI,SAAC9B,EAAM+B,GAAP,OACzB,cAAC,EAAD,CAAwB/B,KAAMA,EAAMoG,SAAUA,GAA3BrE,MAGrB,OACE,sBAAKhE,UAAU,WAAf,UACE,qBAAKA,UAAU,SAAf,SACE,yCAEF,qBAAKA,UAAU,SAAf,SAAyB0I,QC2DhBC,MAjEf,YAAyB,IAATrI,EAAQ,EAARA,KACRiE,EAAUC,cAchB,OAAOlE,EACL,eAAC,IAAMmE,SAAP,WACE,qBAAKzE,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE6E,aAAa,EACbC,WAAY,CACV,CAAE3D,KAAMb,EAAKa,KAAMV,IAAI,UAAD,OAAYH,EAAK0B,KACvC,CAAEb,KAAM,oBAKhB,qBAAKnB,UAAW,MAAhB,SACE,qBAAKA,UAAW,SAAhB,SACE,+CAGJ,qBAAKA,UAAW,MAAhB,SACE,qBAAKA,UAAW,SAAhB,SACE,cAAC,EAAD,CACEkF,OAAQ,CACN,CACEuB,UAAW,OACXzE,GAAI,OACJb,KAAM,OACNqF,cAAe,OACfE,YAAa,YACbb,aAAcvF,EAAKa,MAErB,CACEsF,UAAW,WACXzE,GAAI,cACJb,KAAM,cACNqF,cAAe,cACfE,YAAa,gCACbb,aAAcvF,EAAKyC,cAGvBoC,OAAQ,CAAEG,OAnDL,SAACQ,Ib6GX,SAAP,qCa5GI8C,CAAW,aAAE5G,GAAI1B,EAAK0B,IAAO8D,IAC1BlD,MAAK,WACJtC,EAAKa,KAAO2E,EAAS3E,KACrBb,EAAKyC,YAAc+C,EAAS/C,YAC5BwB,EAAQI,KAAR,iBAAuBrE,EAAK0B,QAE7Ba,OAAM,iBA6CD0C,OAAQ,CAAE9E,IAAI,UAAD,OAAYH,EAAK0B,cAMtC,cAAC,EAAD,CAAewB,WAAW,KCMfqF,MApEf,YAA4B,IAATvI,EAAQ,EAARA,KACjB,EAAoCsD,oBAAS,GAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KAEA,IAAK5G,EAAM,OAAO,cAAC,EAAD,CAAekD,WAAW,IAE5C,IAWM2D,EAAWF,EAwBf,cAAC,EAAD,IAvBA,cAAC,EAAD,CACE/B,OAAQ,CACN,CACEuB,UAAW,WACXzE,GAAI,QACJb,KAAM,QACNqF,cAAe,QACfE,YAAa,qBACbb,aAAc,IAEhB,CACEY,UAAW,WACXzE,GAAI,OACJb,KAAM,OACNqF,cAAe,OACfE,YAAa,oBACbb,aAAc,KAGlBV,OAAQ,CAAEhE,KAAM,OAAQmE,OA/BT,SAACQ,GAClBoB,GAAc,Gd+JX,SAAP,sCc7JI4B,CAAWxI,EAAK0B,GAAI8D,EAAU,MAC3BlD,MAAK,SAACX,GAAD,OAAU3B,EAAKC,MAAMoE,KAAK1C,MAC/BW,MAAK,kBAAMsE,GAAc,MACzBrE,OAAM,SAACxB,SA0BRkE,OAAQ,CAAEpE,KAAM,OAAQV,IAAI,UAAD,OAAYH,EAAK0B,OAMhD,OACE,eAAC,IAAMyC,SAAP,WACE,qBAAKzE,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE6E,aAAa,EACbC,WAAY,CACV,CAAE3D,KAAMb,EAAKa,KAAMV,IAAI,UAAD,OAAYH,EAAK0B,KACvC,CAAEb,KAAM,mBAKhB,qBAAKnB,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,+BAAKM,EAAKa,KAAV,oBAGJ,qBAAKnB,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SAAyBmH,UCoClB4B,MAjGf,YAA6B,IAATzI,EAAQ,EAARA,KACZiE,EAAUC,cACRrC,EAAW6G,cAAX7G,OAER,EAAwByB,mBACtBtD,EAAOA,EAAKC,MAAM0I,MAAK,SAACC,GAAD,OAAaA,EAAQlH,KAAOG,KAAU,IAD/D,mBAAOF,EAAP,KAAakH,EAAb,KAGA,EAAoCvF,oBAAS,GAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KAcA,GAZAjD,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAQvB,OfyKG,SAAP,oCe/KIiF,CAASjH,EAAQ+B,EAAWzC,QACzBmB,KAAKuG,GACLtG,OAAM,SAACxB,OAIH,kBAAM6C,EAAWG,WACvB,CAAClC,KAEC7B,IAAS2B,EAAM,OAAO,cAAC,EAAD,CAAeuB,WAAW,IAErD,IAsBM2D,EAAWF,EAwBf,cAAC,EAAD,IAvBA,cAAC,EAAD,CACE/B,OAAQ,CACN,CACEuB,UAAW,WACXzE,GAAI,QACJb,KAAM,QACNqF,cAAe,QACfE,YAAa,qBACbb,aAAc5D,EAAKsF,OAErB,CACEd,UAAW,WACXzE,GAAI,OACJb,KAAM,OACNqF,cAAe,OACfE,YAAa,oBACbb,aAAc5D,EAAK6F,OAGvB3C,OAAQ,CAAEG,OA1CK,SAACQ,GAClBoB,GAAc,GfiLX,SAAP,oCe/KImC,CAAW,aAAErH,GAAIG,EAAQL,OAAQxB,EAAK0B,IAAO8D,GAAY,MACtDlD,MAAK,SAACsG,GACL,IAAMD,EAAO3I,EAAKC,MAAM0I,MAAK,SAACK,GAAD,OAASA,EAAItH,KAAOkH,EAAQlH,MAOzD,OALIiH,IACFA,EAAK1B,MAAQ2B,EAAQ3B,MACrB0B,EAAKnB,KAAOoB,EAAQpB,MAGfoB,KAERtG,MAAK,kBAAMsE,GAAc,MACzBtE,MAAK,kBAAM2B,EAAQI,KAAR,iBAAuBrE,EAAK0B,QACvCa,OAAM,SAACxB,GAEND,QAAQmI,IAAIlI,QAyBdkE,OAAQ,CAAE9E,IAAI,UAAD,OAAYH,EAAK0B,OAMlC,OACE,eAAC,IAAMyC,SAAP,WACE,qBAAKzE,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACE6E,aAAa,EACbC,WAAY,CACV,CAAE3D,KAAMb,EAAKa,KAAMV,IAAI,UAAD,OAAYH,EAAK0B,KACvC,CAAEb,KAAM,aAAegB,UAK/B,qBAAKnC,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,+CAGJ,qBAAKA,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SAAyBmH,UC9EjC,SAASqC,EAAT,GAAuC,IAAnBnB,EAAkB,EAAlBA,SAAU/H,EAAQ,EAARA,KACtBiE,EAAUC,cAEhB,OAAOlE,EACL,eAAC,IAAMmE,SAAP,WACE,qBAAKzE,UAAW,MAAhB,SACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CAAY6E,aAAa,EAAMC,WAAY,CAAC,CAAE3D,KAAMb,EAAKa,aAG7D,qBAAKnB,UAAU,MAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,aAAf,SACE,6BAAKM,EAAKa,SAEZ,mBAAGnB,UAAU,YAAb,SAA0BM,EAAKyC,cAC/B,eAAC,IAAD,CACE/C,UAAU,yBACVoD,GAAE,iBAAY9C,EAAK0B,GAAjB,SAFJ,UAIE,sBAAMhC,UAAU,iBAJlB,WAMA,eAAC,IAAD,CACEA,UAAU,uBACVoD,GAAE,iBAAY9C,EAAK0B,GAAjB,UAFJ,UAIE,sBAAMhC,UAAU,eAJlB,YAMA,eAAC,IAAD,CACEA,UAAU,kBACVoD,GAAE,iBAAY9C,EAAK0B,GAAjB,cAFJ,UAIE,sBAAMhC,UAAU,eAJlB,gBAMA,cAAC,EAAD,CACEgC,GAAI1B,EAAK0B,GACTO,WAAY,kBAAMgC,EAAQI,KAAK,iBAMzC,cAAC,EAAD,CAAU0D,SAAUA,EAAU9H,MAAOD,EAAKC,WAG5C,cAAC,EAAD,CAAeiD,WAAW,IAsDfiG,MAlDf,WACE,IAAQ3H,EAAWkH,cAAXlH,OACArB,EAAQ6H,cAAR7H,IACR,EAAwBmD,mBAAS,MAAjC,mBAAOtD,EAAP,KAAaoJ,EAAb,KAqBA,OAnBAzF,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAQvB,OhBoBG,SAAP,oCgB1BIwF,CAAS7H,EAAQoC,EAAWzC,QACzBmB,KAAK8G,GACL7G,OAAM,eAIF,kBAAMqB,EAAWG,WACvB,CAACvC,IAUF,cAAC,IAAM2C,SAAP,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmF,OAAK,EAACC,KAAI,UAAKpJ,GAAtB,SACE,cAAC+I,EAAD,CAAUnB,SAXD,SAACyB,GAChBJ,GAAQ,SAACK,GAAD,mBAAC,eACJA,GADG,IAENxJ,MAAOuJ,EAAKC,EAAYxJ,aAQUD,KAAMA,MAEtC,cAAC,IAAD,CAAOuJ,KAAI,UAAKpJ,EAAL,SAAX,SACE,cAAC,EAAD,CAAMH,KAAMA,MAEd,cAAC,IAAD,CAAOuJ,KAAI,UAAKpJ,EAAL,UAAX,SACE,cAAC,EAAD,CAAOH,KAAMA,MAEf,cAAC,IAAD,CAAOuJ,KAAI,UAAKpJ,EAAL,cAAX,SACE,cAAC,EAAD,CAASH,KAAMA,MAEjB,cAAC,IAAD,CAAOuJ,KAAI,UAAKpJ,EAAL,uBAAX,SACE,cAAC,EAAD,CAAUH,KAAMA,MAElB,cAAC,IAAD,UACE,cAAC,EAAD,YC5FK0J,MAhBf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,aAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,UCYOI,OArBf,WACE,OACE,eAAC,IAAMxF,SAAP,WACE,cAAC,EAAD,IACA,qBAAKzE,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4J,OAAK,EAACC,KAAM,IAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAM,SAAb,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,eCAGK,OAZf,WACE,OACE,qBAAKlK,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO6J,KAAK,IAAZ,SACE,cAAC,GAAD,W,MCPVM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.6a3ea24f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = \"https://my-json-server.typicode.com/heretere/flashcard\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing deck.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of deck saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /deck/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { deleteDeck } from \"../utils/api\";\n\nfunction DeleteDeckButton({ id, onComplete }) {\n  return (\n    <button\n      className=\"btn btn-danger text-center float-right\"\n      onClick={() => {\n        if (\n          window.confirm(\n            \"Delete this deck?\\n\\nYou will not be able to recover it.\"\n          )\n        ) {\n          deleteDeck(id, null)\n            .then(onComplete)\n            .catch((error) => {\n              /* ignored */\n            });\n        }\n      }}\n    >\n      <span className=\"oi oi-trash\" />\n    </button>\n  );\n}\n\nexport default DeleteDeckButton;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport DeleteDeckButton from \"../common/DeleteDeckButton\";\n\nfunction DeckListItem({ deck: { id, name, description, cards }, setDecks }) {\n  return (\n    <div className={\"col-12 mt-4\"}>\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"card-title\">\n            <h5 style={{ display: \"inline-block\" }}>{name}</h5>\n            <small className=\"text-muted float-right\">\n              {cards.length} cards\n            </small>\n          </div>\n          <p className=\"card-text\">{description}</p>\n          <Link className=\"btn btn-secondary mr-2\" to={`/decks/${id}`}>\n            <span className=\"oi oi-eye\" /> View\n          </Link>\n          <Link className=\"btn btn-primary mr-2\" to={`/decks/${id}/study`}>\n            <span className=\"oi oi-book\" /> Study\n          </Link>\n          <Link className=\"btn btn-info\" to={`/decks/${id}/edit`}>\n            <span className=\"oi oi-list\" /> Edit\n          </Link>\n          <DeleteDeckButton\n            id={id}\n            onComplete={() =>\n              setDecks((current) => {\n                return current.filter((deck) => deck.id !== id);\n              })\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DeckListItem;\n","import React from \"react\";\n\nfunction LoadingCircle({ container }) {\n  const internal = (\n    <div className=\"d-flex justify-content-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n\n  return container ? (\n    <div className={\"row\"}>\n      <div className={\"col-12\"}>{internal}</div>\n    </div>\n  ) : (\n    internal\n  );\n}\n\nexport default LoadingCircle;\n","import React, { useEffect, useState } from \"react\";\nimport DeckListItem from \"./DeckListItem\";\nimport { listDecks } from \"../utils/api\";\nimport LoadingCircle from \"../common/LoadingCircle\";\n\nfunction DeckList() {\n  const [decks, setDecks] = useState(null);\n\n  const deckList = decks\n    ? decks.map((deck, idx) => (\n        <DeckListItem key={idx} deck={deck} setDecks={setDecks} />\n      ))\n    : [];\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    listDecks(controller.signal)\n      .then(setDecks)\n      .catch(() => {\n        /* ignored */\n      });\n\n    return () => controller.abort();\n  }, []);\n\n  if (decks && decks.length) return deckList;\n  else\n    return (\n      <div className={\"col-12\"}>\n        {decks ? (\n          <h1 className=\"text-center\">\n            Looks like there are currently no decks.\n          </h1>\n        ) : (\n          <LoadingCircle container={false} />\n        )}\n      </div>\n    );\n}\n\nexport default DeckList;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DeckList from \"./DeckList\";\n\nfunction Home() {\n  const history = useHistory();\n\n  return (\n    <React.Fragment>\n      <div className={\"row\"}>\n        <div className={\"col-12\"}>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => history.push(\"/decks/new\")}\n          >\n            <span className=\"oi oi-plus\" /> Create Deck\n          </button>\n        </div>\n        <DeckList />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Breadcrumb({ includeHome, navigation }) {\n  let navList = includeHome\n    ? [\n        {\n          name: (\n            <React.Fragment>\n              <span className=\"oi oi-home\" />\n              Home\n            </React.Fragment>\n          ),\n          url: \"/\",\n        },\n        ...navigation,\n      ]\n    : navigation;\n\n  navList = navList.map(({ name, url }, index) => {\n    if (index === navList.length - 1) {\n      return (\n        <li key={index} className=\"breadcrumb-item active\" aria-current=\"page\">\n          {name}\n        </li>\n      );\n    } else {\n      return (\n        <Link key={index} to={url} className=\"breadcrumb-item\">\n          {name}\n        </Link>\n      );\n    }\n  });\n\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">{navList}</ol>\n    </nav>\n  );\n}\n\nexport default Breadcrumb;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction DynamicForm({\n  inputs,\n  submit: { name: submitName = \"Submit\", action: submitAction } = {},\n  cancel: { name: cancelName = \"Cancel\", url: cancelUrl } = {},\n}) {\n  const initialForm = {};\n\n  inputs.forEach((input) => (initialForm[input.name] = input.defaultValue));\n\n  const [formData, setFormData] = useState({ ...initialForm });\n\n  const inputList = inputs.map((input, idx) => {\n    const updateFormData = (e) => {\n      e.persist();\n      setFormData((currentFormData) => ({\n        ...currentFormData,\n        [e.target.name]: e.target.value,\n      }));\n    };\n\n    return (\n      <div key={idx} className=\"form-group\">\n        <label htmlFor={input.id}>{input.formattedName}</label>\n        {input.inputType === \"textarea\" ? (\n          <textarea\n            className=\"form-control\"\n            id={input.id}\n            name={input.name}\n            placeholder={input.placeholder}\n            value={formData[input.name]}\n            onChange={updateFormData}\n            rows={4}\n            required={true}\n          />\n        ) : (\n          <input\n            className=\"form-control\"\n            id={input.id}\n            name={input.name}\n            placeholder={input.placeholder}\n            value={formData[input.name]}\n            onChange={updateFormData}\n            required={true}\n          />\n        )}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"row\">\n      <div className={\"col-12\"}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            submitAction(formData);\n            setFormData({ ...initialForm });\n          }}\n        >\n          {inputList}\n          <Link className=\"btn btn-secondary mr-2\" to={cancelUrl}>\n            {cancelName}\n          </Link>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {submitName}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default DynamicForm;\n","import React, { useState } from \"react\";\nimport Breadcrumb from \"../../../common/Breadcrumb\";\nimport { useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../../../utils/api\";\nimport LoadingCircle from \"../../../common/LoadingCircle\";\nimport DynamicForm from \"../../../common/DynamicForm\";\n\nfunction NewDeck() {\n  const history = useHistory();\n\n  const [submitting, setSubmitting] = useState(false);\n\n  const submitDeck = (formData) => {\n    setSubmitting(true);\n\n    createDeck(formData, null)\n      .then((deck) => history.push(`/decks/${deck.id}`))\n      .then(() => {\n        setSubmitting(false);\n      })\n      .catch(() => {\n        /* ignored */\n      });\n  };\n\n  const content = !submitting ? (\n    <DynamicForm\n      inputs={[\n        {\n          inputType: \"text\",\n          id: \"name\",\n          name: \"name\",\n          formattedName: \"Name\",\n          placeholder: \"Deck Name\",\n          defaultValue: \"\",\n        },\n        {\n          inputType: \"textarea\",\n          id: \"description\",\n          name: \"description\",\n          formattedName: \"Description\",\n          placeholder: \"Brief description of the deck\",\n          defaultValue: \"\",\n        },\n      ]}\n      submit={{ action: submitDeck }}\n      cancel={{ url: \"/\" }}\n    />\n  ) : (\n    <LoadingCircle container={false} />\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Breadcrumb\n            includeHome={true}\n            navigation={[{ name: \"Create Deck\" }]}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h1>Create Deck</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">{content}</div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default NewDeck;\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction StudyCardSide({\n  flipped,\n  front,\n  text,\n  cardNumber,\n  total,\n  updateState,\n  showNextButton,\n}) {\n  const history = useHistory();\n\n  return (\n    <div className={front ? \"card-fr\" : \"card-bk bg-dark text-white\"}>\n      <div className=\"card-body\">\n        <h3 className=\"card-title\">\n          {front !== flipped ? \"Card\" : \"Crud\"} {cardNumber + 1} of {total}\n        </h3>\n        <p className=\"card-text\">{text}</p>\n        <button\n          className={\n            front ? \"btn btn-outline-dark\" : \"btn btn-outline-light text-white\"\n          }\n          onClick={() => {\n            updateState(\"flipped\", front);\n            updateState(\"hasBeenFlipped\", true);\n          }}\n        >\n          {front !== flipped ? \"Flip\" : \"Flop\"}\n        </button>\n        {showNextButton && (\n          <button\n            className={\n              \"btn btn-outline-primary ml-2 \" + (front ? \"\" : \"text-white\")\n            }\n            onClick={() => {\n              if (cardNumber + 1 !== total) {\n                updateState(\"flipped\", false);\n                updateState(\"cardNumber\", cardNumber + 1);\n                updateState(\"hasBeenFlipped\", false);\n              } else {\n                if (\n                  window.confirm(\n                    \"Restart cards?\\n\\nClick 'cancel' to return to the home page.\"\n                  )\n                ) {\n                  updateState(\"flipped\", false);\n                  updateState(\"cardNumber\", 0);\n                  updateState(\"hasBeenFlipped\", false);\n                } else {\n                  history.push(\"/\");\n                }\n              }\n            }}\n          >\n            {front !== flipped ? \"Next\" : \"Nuxt\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction StudyCard({\n  deckId,\n  card: { front, back } = {},\n  total,\n  state: { flipped, hasBeenFlipped, cardNumber },\n  updateState,\n}) {\n  if (total <= 2) {\n    return (\n      <React.Fragment>\n        <h2>Not enough cards.</h2>\n        <p>\n          You need at least 3 cards to study. There are {total} in this deck.\n        </p>\n        <Link className=\"btn btn-primary\" to={`/decks/${deckId}/cards/new`}>\n          <span className=\"oi oi-plus\" /> Add Cards\n        </Link>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className={\"card card-f h-100 \" + (flipped ? \"fl\" : \"\")}>\n      <StudyCardSide\n        flipped={flipped}\n        front={true}\n        text={front}\n        cardNumber={cardNumber}\n        total={total}\n        showNextButton={hasBeenFlipped}\n        updateState={updateState}\n      />\n      <StudyCardSide\n        flipped={flipped}\n        front={false}\n        text={back}\n        cardNumber={cardNumber}\n        total={total}\n        showNextButton={hasBeenFlipped}\n        updateState={updateState}\n      />\n    </div>\n  );\n}\n\nexport default StudyCard;\n","import React, { useState } from \"react\";\nimport Breadcrumb from \"../../../common/Breadcrumb\";\nimport LoadingCircle from \"../../../common/LoadingCircle\";\nimport StudyCard from \"./StudyCard\";\n\nfunction Study({ deck }) {\n  const initialState = {\n    cardNumber: 0,\n    flipped: false,\n    hasBeenFlipped: false,\n  };\n\n  const [state, setState] = useState({ ...initialState });\n\n  const updateState = (key, value) =>\n    setState((current) => ({ ...current, [key]: value }));\n\n  return deck ? (\n    <React.Fragment>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Breadcrumb\n            includeHome={true}\n            navigation={[\n              { name: deck.name, url: \"/decks/\" + deck.id },\n              { name: \"Study\" },\n            ]}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h1>Study: {deck.name}</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <StudyCard\n            deckId={deck.id}\n            card={deck.cards[state.cardNumber]}\n            total={deck.cards.length}\n            state={state}\n            updateState={updateState}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n    <LoadingCircle container={true} />\n  );\n}\n\nexport default Study;\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { deleteCard } from \"../../utils/api\";\n\nfunction CardListItem({ card, setCards }) {\n  const { url } = useRouteMatch();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-6\">\n            <p className=\"card-text\">{card.front}</p>\n          </div>\n          <div className=\"col-6\">\n            <p className=\"card-text\">{card.back}</p>\n          </div>\n        </div>\n        <div className=\"row mt-4\">\n          <div className=\"col-12 text-right\">\n            <Link\n              className=\"btn btn-secondary mr-2\"\n              to={`${url}/cards/${card.id}/edit`}\n            >\n              <span className=\"oi oi-pencil\" /> Edit\n            </Link>\n            <button\n              className=\"btn btn-danger text-center float-right\"\n              onClick={() => {\n                if (\n                  window.confirm(\n                    \"Delete this card?\\n\\nYou will not be able to recover it.\"\n                  )\n                ) {\n                  deleteCard(card.id, null)\n                    .then(() =>\n                      setCards((cards) =>\n                        cards.filter((check) => check.id !== card.id)\n                      )\n                    )\n                    .catch((error) => {\n                      /* ignored */\n                    });\n                }\n              }}\n            >\n              <span className=\"oi oi-trash\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CardListItem;\n","import React from \"react\";\nimport CardListItem from \"./CardListItem\";\n\nfunction CardList({ setCards, cards }) {\n  const cardList = cards.map((card, idx) => (\n    <CardListItem key={idx} card={card} setCards={setCards} />\n  ));\n\n  return (\n    <div className=\"row mt-4\">\n      <div className=\"col-12\">\n        <h3>Cards</h3>\n      </div>\n      <div className=\"col-12\">{cardList}</div>\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from \"react\";\nimport Breadcrumb from \"../../../common/Breadcrumb\";\nimport LoadingCircle from \"../../../common/LoadingCircle\";\nimport DynamicForm from \"../../../common/DynamicForm\";\nimport { useHistory } from \"react-router-dom\";\nimport { updateDeck } from \"../../../utils/api\";\n\nfunction Edit({ deck }) {\n  const history = useHistory();\n\n  const update = (formData) => {\n    updateDeck({ id: deck.id, ...formData })\n      .then(() => {\n        deck.name = formData.name;\n        deck.description = formData.description;\n        history.push(`/decks/${deck.id}`);\n      })\n      .catch(() => {\n        /* Graceful error */\n      });\n  };\n\n  return deck ? (\n    <React.Fragment>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <Breadcrumb\n            includeHome={true}\n            navigation={[\n              { name: deck.name, url: `/decks/${deck.id}` },\n              { name: \"Edit Deck\" },\n            ]}\n          />\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className={\"col-12\"}>\n          <h3>Edit Deck</h3>\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className={\"col-12\"}>\n          <DynamicForm\n            inputs={[\n              {\n                inputType: \"text\",\n                id: \"name\",\n                name: \"name\",\n                formattedName: \"Name\",\n                placeholder: \"Deck Name\",\n                defaultValue: deck.name,\n              },\n              {\n                inputType: \"textarea\",\n                id: \"description\",\n                name: \"description\",\n                formattedName: \"Description\",\n                placeholder: \"Brief description of the deck\",\n                defaultValue: deck.description,\n              },\n            ]}\n            submit={{ action: update }}\n            cancel={{ url: `/decks/${deck.id}` }}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  ) : (\n    <LoadingCircle container={true} />\n  );\n}\n\nexport default Edit;\n","import React, { useState } from \"react\";\nimport Breadcrumb from \"../../../common/Breadcrumb\";\nimport DynamicForm from \"../../../common/DynamicForm\";\nimport { createCard } from \"../../../utils/api\";\nimport LoadingCircle from \"../../../common/LoadingCircle\";\n\nfunction AddCard({ deck }) {\n  const [submitting, setSubmitting] = useState(false);\n\n  if (!deck) return <LoadingCircle container={true} />;\n\n  const submitCard = (formData) => {\n    setSubmitting(true);\n\n    createCard(deck.id, formData, null)\n      .then((card) => deck.cards.push(card))\n      .then(() => setSubmitting(false))\n      .catch((error) => {\n        /* ignored */\n      });\n  };\n\n  const content = !submitting ? (\n    <DynamicForm\n      inputs={[\n        {\n          inputType: \"textarea\",\n          id: \"front\",\n          name: \"front\",\n          formattedName: \"Front\",\n          placeholder: \"Front side of card\",\n          defaultValue: \"\",\n        },\n        {\n          inputType: \"textarea\",\n          id: \"back\",\n          name: \"back\",\n          formattedName: \"Back\",\n          placeholder: \"Back side of card\",\n          defaultValue: \"\",\n        },\n      ]}\n      submit={{ name: \"Save\", action: submitCard }}\n      cancel={{ name: \"Done\", url: `/decks/${deck.id}` }}\n    />\n  ) : (\n    <LoadingCircle />\n  );\n\n  return (\n    <React.Fragment>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <Breadcrumb\n            includeHome={true}\n            navigation={[\n              { name: deck.name, url: `/decks/${deck.id}` },\n              { name: \"Add Card\" },\n            ]}\n          />\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <h3>{deck.name}: Add Card</h3>\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className=\"col-12\">{content}</div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default AddCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport LoadingCircle from \"../../../common/LoadingCircle\";\nimport { readCard, updateCard } from \"../../../utils/api\";\nimport DynamicForm from \"../../../common/DynamicForm\";\nimport Breadcrumb from \"../../../common/Breadcrumb\";\n\nfunction EditCard({ deck }) {\n  const history = useHistory();\n  const { cardId } = useParams();\n\n  const [card, setCard] = useState(\n    deck ? deck.cards.find((tmpCard) => tmpCard.id === cardId) : {}\n  );\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readCard(cardId, controller.signal)\n      .then(setCard)\n      .catch((error) => {\n        /* ignored */\n      });\n\n    return () => controller.abort();\n  }, [cardId]);\n\n  if (!deck || !card) return <LoadingCircle container={true} />;\n\n  const submitCard = (formData) => {\n    setSubmitting(true);\n\n    updateCard({ id: cardId, deckId: deck.id, ...formData }, null)\n      .then((tmpCard) => {\n        const find = deck.cards.find((tmp) => tmp.id === tmpCard.id);\n\n        if (find) {\n          find.front = tmpCard.front;\n          find.back = tmpCard.back;\n        }\n\n        return tmpCard;\n      })\n      .then(() => setSubmitting(false))\n      .then(() => history.push(`/decks/${deck.id}`))\n      .catch((error) => {\n        /* Graceful Error*/\n        console.log(error);\n      });\n  };\n\n  const content = !submitting ? (\n    <DynamicForm\n      inputs={[\n        {\n          inputType: \"textarea\",\n          id: \"front\",\n          name: \"front\",\n          formattedName: \"Front\",\n          placeholder: \"Front side of card\",\n          defaultValue: card.front,\n        },\n        {\n          inputType: \"textarea\",\n          id: \"back\",\n          name: \"back\",\n          formattedName: \"Back\",\n          placeholder: \"Back side of card\",\n          defaultValue: card.back,\n        },\n      ]}\n      submit={{ action: submitCard }}\n      cancel={{ url: `/decks/${deck.id}` }}\n    />\n  ) : (\n    <LoadingCircle />\n  );\n\n  return (\n    <React.Fragment>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <Breadcrumb\n            includeHome={true}\n            navigation={[\n              { name: deck.name, url: `/decks/${deck.id}` },\n              { name: \"Edit Card \" + cardId },\n            ]}\n          />\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <h3>Edit Card</h3>\n        </div>\n      </div>\n      <div className={\"row\"}>\n        <div className=\"col-12\">{content}</div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default EditCard;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Link,\n  Route,\n  Switch,\n  useHistory,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api\";\nimport Study from \"./study/Study\";\nimport Breadcrumb from \"../../common/Breadcrumb\";\nimport LoadingCircle from \"../../common/LoadingCircle\";\nimport DeleteDeckButton from \"../../common/DeleteDeckButton\";\nimport CardList from \"./CardList\";\nimport NotFound from \"../../Layout/NotFound\";\nimport Edit from \"./edit/Edit\";\nimport AddCard from \"./cards/AddCard\";\nimport EditCard from \"./cards/EditCard\";\n\nfunction DeckView({ setCards, deck }) {\n  const history = useHistory();\n\n  return deck ? (\n    <React.Fragment>\n      <div className={\"row\"}>\n        <div className=\"col-12\">\n          <Breadcrumb includeHome={true} navigation={[{ name: deck.name }]} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card border-0\">\n            <div className=\"card-body p-0\">\n              <div className=\"card-title\">\n                <h4>{deck.name}</h4>\n              </div>\n              <p className=\"card-text\">{deck.description}</p>\n              <Link\n                className=\"btn btn-secondary mr-2\"\n                to={`/decks/${deck.id}/edit`}\n              >\n                <span className=\"oi oi-pencil\" /> Edit\n              </Link>\n              <Link\n                className=\"btn btn-primary mr-2\"\n                to={`/decks/${deck.id}/study`}\n              >\n                <span className=\"oi oi-book\" /> Study\n              </Link>\n              <Link\n                className=\"btn btn-primary\"\n                to={`/decks/${deck.id}/cards/new`}\n              >\n                <span className=\"oi oi-plus\" /> Add Cards\n              </Link>\n              <DeleteDeckButton\n                id={deck.id}\n                onComplete={() => history.push(\"/\")}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <CardList setCards={setCards} cards={deck.cards} />\n    </React.Fragment>\n  ) : (\n    <LoadingCircle container={true} />\n  );\n}\n\nfunction Deck() {\n  const { deckId } = useParams();\n  const { url } = useRouteMatch();\n  const [deck, setDeck] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    readDeck(deckId, controller.signal)\n      .then(setDeck)\n      .catch(() => {\n        /* ignored */\n      });\n\n    return () => controller.abort();\n  }, [deckId]);\n\n  const setCards = (func) => {\n    setDeck((currentDeck) => ({\n      ...currentDeck,\n      cards: func(currentDeck.cards),\n    }));\n  };\n\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route exact path={`${url}`}>\n          <DeckView setCards={setCards} deck={deck} />\n        </Route>\n        <Route path={`${url}/edit`}>\n          <Edit deck={deck} />\n        </Route>\n        <Route path={`${url}/study`}>\n          <Study deck={deck} />\n        </Route>\n        <Route path={`${url}/cards/new`}>\n          <AddCard deck={deck} />\n        </Route>\n        <Route path={`${url}/cards/:cardId/edit`}>\n          <EditCard deck={deck} />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default Deck;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport NewDeck from \"./deck/new/NewDeck\";\nimport Deck from \"./deck/Deck\";\nimport NotFound from \"../Layout/NotFound\";\n\nfunction Decks() {\n  return (\n    <Switch>\n      <Route exact path=\"/decks/new\">\n        <NewDeck />\n      </Route>\n      <Route path=\"/decks/:deckId\">\n        <Deck />\n      </Route>\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Decks;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"../home/Home\";\nimport Decks from \"../decks/Decks\";\n\nfunction Layout() {\n  return (\n    <React.Fragment>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path={\"/\"}>\n            <Home />\n          </Route>\n          <Route path={\"/decks\"}>\n            <Decks />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}